HAL_INPUT
=========

. <<name,NAME>>
. <<synopsis,SYNOPSIS>>
. <<description,DESCRIPTION>>
. <<input specification,INPUT SPECIFICATION>>
. <<device features supported,DEVICE FEATURES SUPPORTED>>
. <<hal pins and parameters,HAL PINS AND PARAMETERS>>
. <<permissions and udev,PERMISSIONS AND UDEV>>
. <<bugs,BUGS>>
. <<see also,SEE ALSO>>



===== [[name]]NAME
hal_input -- control HAL pins with any Linux input device, including USB HID devices


===== [[synopsis]]SYNOPSIS
__loadusr__ **hal_input** __[-KRAL] inputspec ...__


===== [[description]]DESCRIPTION
hal_input is an interface between HAL and any Linux input device, including USB
HID devices.  For each device named, **hal_input** creates pins corresponding
to its keys, absolute axes, and LEDs.  At a fixed rate of approximately 10ms,
it synchronizes the device and the HAL pins.


===== [[input specification]]INPUT SPECIFICATION
The __inputspec__ may be in one of several forms:

A string __S__
A substring or shell-style pattern match will be tested against the "name"
of the device, the "phys" (which gives information about how it is connected),
and the "id", which is a string of the form "Bus=... Vendor=... Product=...
Version=...".  You can view the name, phys, and id of attached devices by executing **less /proc/bus/input/devices**.  Examples:
.RS 12
.PD 0
SpaceBall
.PP
"Vendor=001f Product=0001"
.PP
serio*/input0
.RE
.PD

A number __N__
This opens **/dev/input/event**__N__.  Except for devices that are always
attached to the system, this number may change over reboots or when the device
is removed.  For this reason, using an integer is not recommended.
.PP
When several devices are identified by the same string, add "**:**__N__" where
__N__ is the index of the desired device.  For example, if **Mouse**
matches **input3** and **input10**, then **Mouse** and **Mouse:0**
select **input3**.  Specifying **mouse:1** selects input10.
.PP
For devices that appear as multiple entries in /dev/input, these indices are
likely to stay the same every time.  For multiple identical devices, these
indices are likely to depend on the insertion order, but stay the same across
reboots as long as the devices are not moved to different ports or unplugged
while the machine is booted.
.PP
If the first character of the __inputspec__ is a "+", then **hal_input**
requests exclusive access to the device.  The first device matching an
__inputspec__ is used.  Any number of __inputspec__s may be used.
.PP
A __subset option may preceed each inputspec__.  The subset option
begins with a dash.  Each letter in the subset option specifies a device
feature to **include**.  Features that are not specified are excluded.
For instance, to export keyboard LEDs to HAL without exporting keys, use
.RS 12
hal_input -L __keyboard__ ...
.RE



===== [[device features supported]]DEVICE FEATURES SUPPORTED
.IP \(bu 4
EV_KEY (buttons and keys).  Subset -K
.IP \(bu 4
EV_ABS (absolute analog inputs).  Subset -A
.IP \(bu 4
EV_REL (relative analog inputs).  Subset -R
.IP \(bu 4
EV_LED (LED outputs).  Subset -L


===== [[hal pins and parameters]]HAL PINS AND PARAMETERS
.SS For buttons

input.__N__**.btn-**__name__ bit out
input.__N__**.btn-**__name__**-not** bit out
Created for each button on the device.
.SS For keys

input.__N__**.key-**__name__**
**input.__N__**.key-**__name__**-not
**Created for each key on the device.
.SS For absolute axes

input.__N__**.abs-**__name__**-counts** s32 out
input.__N__**.abs-**__name__**-position** float out
input.__N__**.abs-**__name__**-scale** parameter float rw
input.__N__**.abs-**__name__**-offset** parameter float rw
input.__N__**.abs-**__name__**-fuzz** parameter s32 rw
input.__N__**.abs-**__name__**-flat** parameter s32 rw
input.__N__**.abs-**__name__**-min** parameter s32 r
input.__N__**.abs-**__name__**-max** parameter s32 r
Created for each absolute axis on the device.  Device positions closer than
**flat** to **offset** are reported as **offset** in **counts**, and
**counts** does not change until the device position changes by at least
**fuzz**.  The position is computed as **position** = (**counts** -
**offset**) / **scale**.  The default value of **scale** and **offset**
map the range of the axis reported by the operating system to [-1,1].  The
default values of **fuzz** and **flat** are those reported by the operating
system.  The values of **min** and **max** are those reported by the
operating system.
.SS For relative axes

input.__N__**.rel-**__name__**-counts** s32 out
input.__N__**.rel-**__name__**-position** float out
input.__N__**.rel-**__name__**-reset** bit in
input.__N__**.rel-**__name__**-scale** parameter float rw
input.__N__**.rel-**__name__**-absolute** parameter s32 rw
input.__N__**.rel-**__name__**-precision** parameter s32 rw
input.__N__**.rel-**__name__**-last** parameter s32 rw
Created for each relative axis on the device.  As long as **reset** is true,
**counts** is reset to zero regardless of any past or current axis movement.
Otherwise, **counts** increases or decreases according to the motion of the
axis.  **counts** is divided by position-scale to give **position**.
The default value of **position** is 1.  There are some devices, notably
scroll wheels, which return signed values with less resolution than 32 bits.
The default value of **precision** is 32.  **precision** can be set to 8
for a device that returns signed 8 bit values, or any other value from 1 to 32.
**absolute**, when set true, ignores duplicate events with the same value.
This allows for devices that repeat events without any user action to work
correctly.  **last** shows the most recent count value returned by the
device, and is used in the implementation of **absolute**.
.SS For LEDs

input.__N__**.led-**__name__ bit out
input.__N__**.led-**__name__**-invert** parameter bit rw
Created for each LED on the device.


===== [[permissions and udev]]PERMISSIONS AND UDEV
By default, the input devices may not be accessible to regular
users--**hal_input** requires read-write access, even if the device has no
outputs.  To change the default permission of a device, add a new file to
/etc/udev/rules.d to set the device's GROUP to "plugdev".  You can do this for
all input devices with this rule:
.RS
SUBSYSTEM=="input", MODE="0660", GROUP="plugdev"
.RE
You can also make more specific rules for particular devices.  For instance, a
SpaceBall input device uses the 'spaceball' kernel module, so a udev entry for
it would read:
.RS
DRIVER=="spaceball", MODE="0660", GROUP="plugdev"
.RE
the next time the device is attached to the system, it will be accessible
to the "plugdev" group.

For USB devices, the udev line would refer to the device's Vendor and Product
values, such as 
.RS
SYSFS{idProduct}=="c00e", SYSFS{idVendor}=="046d", MODE="0660", GROUP="plugdev"
.RE
for a particular logictech-brand mouse.

For more information on writing udev rules, see **udev(8)**.


===== [[bugs]]BUGS
The initial state of keys, buttons, and absolute axes are erroneously reported
as FALSE or 0 until an event is received for that key, button, or axis.


===== [[see also]]SEE ALSO
**udev(8)**
