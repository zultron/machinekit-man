linuxcncrsh
===========

. <<name,NAME>>
. <<synopsis,SYNOPSIS>>
. <<description,DESCRIPTION>>
. <<options,OPTIONS>>
. <<starting linuxcncrsh,Starting linuxcncrsh>>
. <<connecting,Connecting>>
. <<network protocol,Network protocol>>
. <<"linuxcnc subcommands","LinuxCNC Subcommands">>
. <<example session,Example Session>>


===== [[name]]NAME
linuxcncrsh -- text-mode interface for commanding LinuxCNC over the network


===== [[synopsis]]SYNOPSIS
linuxcncrsh [OPTIONS] [-- LINUXCNC_OPTIONS]


===== [[description]]DESCRIPTION
**linuxcncrsh\fP is a user interface for LinuxCNC.  Instead of popping up a GUI
**window like axis(1) and touchy(1) do, it processes text-mode commands
that it receives via the network.  A human (or a program) can interface
with **linuxcncrsh\fP using telnet(1) or nc(1) or similar programs.
**.P
All features of LinuxCNC are available via the **linuxcncrsh\fP interface.
**

===== [[options]]OPTIONS
.P
-p,--port PORT_NUMBER
.RS
Specify the port for linuxcncrsh to listen on.  Defaults to 5007 if omitted.
.RE
.P
-n,--name SERVER_NAME
.RS
Sets the server name that linuxcncrsh will use to identify itself during
handshaking with a new client.  Defaults to EMCNETSVR if omitted.
.RE
.P
-w,--connectpw PASSWORD
.RS
Specify the connection password to use during handshaking with a new
client.  Note that the password is sent in the clear, so it can be read
by anyone who can read packets on the network between the server and
the client.  Defaults to EMC if omitted.
.RE
.P
-e,--enablepw PASSWORD
.RS
Specify the password required to enable LinuxCNC via linuxcncrsh.  Note that the
password is sent in the clear, so it can be read by anyone who can read
packets on the network between the server and the client.  Defaults to
EMCTOO if omitted.
.RE
.P
-s,--sessions MAX_SESSIONS
.RS
Specify the maximum number of simultaneous connections.  Defaults to -1
(no limit) if not specified.
.RE
.P
In addition to the options listed above, linuxcncrsh accepts an optional
special LINUXCNC_OPTION at the end:
.P
-ini LINUXCNC_INI_FILE
.RS
LinuxCNC .ini file to use.  The -ini option **must\fP be preceeded by two
**dashes: "--".  Defaults to emc.ini if omitted.
.RE


===== [[starting linuxcncrsh]]Starting linuxcncrsh
.P
To use linuxcncrsh instead of a normal LinuxCNC GUI like axis or touch, specify
it in your .ini file like this:
.RS
.P
[DISPLAY]
.P
DISPLAY=linuxcncrsh
.RE
.P
To use linuxcncrsh in addition to a normal GUI, you can either start it
at the end of your .hal file, or run it by hand in a terminal window.
.P
To start it from hal, add a line like this to the end of your .hal file:
.RS
.P
loadusr linuxcncrsh [OPTIONS] [-- LINUXCNC_OPTIONS]
.RE
.P
To start it from the terminal, run linuxcncrsh manually like this:
.RS
.P
linuxcncrsh [OPTIONS] [-- LINUXCNC_OPTIONS]
.RE


===== [[connecting]]Connecting
.P
Once LinuxCNC is up and linuxcncrsh is running, you can connect to it using
** or nc\fP or similar:
**.RS
.P
telnet HOST PORT
.RS
HOST is the hostname or IP address of the computer running linuxcncrsh, and
PORT is the port it's listening on (5007 if you did not give linuxcncrsh the
--port option).
.RE


===== [[network protocol]]Network protocol
.P
linuxcncrsh accepts TCP connections on the port specified by the --port option,
or 5007 if not specified.
.P
The client sends requests, and the linuxcncrsh server returns replies.
Requests consist of a command word followed by optional command-specific
parameters.  Requests and most request parameters are case
insensitive. The exceptions are passwords, file paths and text strings.
.P
Requests to linuxcncrsh are terminated with line endings, any combination of
one or more '\\r' and '\\n' characters.  Replies from linuxcncrsh are terminated
with the sequence \'\\r\\n\'.
.P
The supported commands are as follows:
.P
**hello <password> <client> <version>**
.RS
<password> must match linuxcncrsh's connect password, or "EMC" if no
--connectpw was supplied.  The three arguments may not contain whitespace.
If a valid password was entered the server will respond with:
.RS
__HELLO ACK <ServerName> <ServerVersion>__
.RE
.P
If an invalid password or any other syntax error occurs then the server 
responds with:
.RS
__HELLO NAK__
.RE
.RE
.P
**get <subcommand> [<parameters>]**
.RS
The get command takes one of the LinuxCNC sub-commands (described in the
section **LinuxCNC Subcommands**, below) and zero or more additional
subcommand-specific parameters.
.RE
.P
**set <subcommand> <parameters>**
.RS
The set command takes one of the LinuxCNC sub-commands (described in the
section **LinuxCNC Subcommands**, below) and one or more additional
parameters.
.RE
.P
**quit**
.RS
The quit command disconnects the associated socket connection.
.RE
.P
**shutdown**
.RS
The shutdown command tells LinuxCNC to shutdown and disconnect the
session. This command may only be issued if the Hello has been
successfully negotiated and the connection has control of the CNC (see
**enable** subcommand in the **LinuxCNC Subcommands** section, below).
.RE
.P
**help**
.RS
The help command will return help information in text format over the
connection. If no parameters are specified, it will itemize the available
commands.  If a command is specified, it will provide usage information
for the specified command. Help will respond regardless of whether a
"Hello" has been successsfully negotiated.
.RE


===== [["linuxcnc subcommands"]]"LinuxCNC Subcommands"
.P
Subcommands for **get** and **set** are:
.P
**echo {on|off}**
.RS
With get, any on/off parameter is ignored and the current echo state is
returned.  With set, sets the echo state as specified.  Echo defaults to
on when the connection is first established.  When echo is on, all commands
will be echoed upon receipt.  This state is local to each connection.
.RE
.P
**verbose {on|off}**
.RS
With get, any on/off parameter is ignored and the current verbose state
is returned.  With set, sets the verbose state as specified.  When verbose
mode is on, all set commands return positive acknowledgement in the form
SET <COMMAND> ACK, and text error messages will be issued (FIXME: I don't
know what this means).  The verbose state is local to each connection,
and starts out OFF on new connections.
.RE
.P
**enable {<passwd>|off}**
.RS
The session's enable state indicates whether the current connection is
enabled to perform control functions.  With get, any parameter is ignored,
and the current enable state is returned.  With set and a valid password
matching linuxcncrsh's --enablepw (EMCTOO if not specified), the current
connection is enabled for control functions.  "OFF" may not be used as
a password and disables control functions for this connection.
.RE
.P
**config [TBD]**
.RS
Unused, ignore for now.
.RE
.P
**comm_mode {ascii|binary}**
.RS
With get, any parameter is ignored and the current communications
mode is returned.  With set, will set the communications mode to the
specified mode.  The ascii mode is the text request/reply mode, the
binary protocol is not currently designed or implemented.
.RE
.P
**comm_prot <version>**
.RS
With get, any parameter is ignored and the current protocol version
used by the server is returned.  With set, sets the server to use the
specified protocol version, provided it is lower than or equal to the
highest version number supported by the server implementation.
.RE
.P
**inifile**
.RS
Not currently implemented!  With get, returns the string "emc.ini".
Should return the full path and file name of the current configuration
inifile.  Setting this does nothing.
.RE
.P
**plat**
.RS
With get, returns the string "Linux".
.RE
.P
**ini <var> <section>**
.RS
Not currently implemented, do not use!  Should return the string value
of <var> in section <section> of the ini file.
.RE
.P
**debug <value>**
.RS
With get, any parameter is ignored and the current integer value of
EMC_DEBUG is returned.  Note that the value of EMC_DEBUG returned is
the from the UI's ini file, which may be different than emc's ini file.
With set, sends a command to the EMC to set the new debug level, and
sets the EMC_DEBUG global here to the same value. This will make the
two values the same, since they really ought to be the same.
.RE
.P
**set_wait {none|received|done}**
.RS
The set_wait setting controls the wait after receiving a command.
It can be "none" (return right away), "received" (after the command was
sent and received), or "done" (after the command was done).  With get,
any parameter is ignored and the current set_wait setting is returned.
With set, set the set_wait setting to the specified value.
.RE
.P
**wait {received|done}**
.RS
With set, force a wait for the previous command to be received, or
done. This lets you wait in the event that "set_wait none" is in effect.
.RE
.P
**set_timeout <timeout>**
.RS
With set, set the timeout for commands to return to <timeout>
seconds. Timeout is a real number. If it's <= 0.0, it means wait forever.
Default is 0.0, wait forever.
.RE
.P
**update {none|auto}**
.RS
The update mode controls whether to return fresh or stale values for
"get" requests.  When the update mode is "none" it returns stale values,
when it's "auto" it returns fresh values.  Defaults to "auto" for new
connections.  Set this to "none" if you like to be confused.
.RE
.P
**error**
.RS
With get, returns the current error string, or "ok" if no error.
.RE
.P
**operator_display**
.RS
With get, returns the current operator display string, or "ok" if none.
.RE
.P
**operator_text**
.RS
With get, returns the current operator text string, or "ok" if none.
.RE
.P
**time**
.RS
With get, returns the time, in seconds, from the start of the epoch. This
starting time depends on the platform.
.RE
.P
**estop {on|off}**
.RS
With get, ignores any parameters and returns the current estop setting
as "on" or "off".  With set, sets the estop as specified.  Estop "on"
means the machine is in the estop state and won't run.
.RE
.P
**machine {on|off}**
.RS
With get, ignores any parameters and returns the current machine power
setting as "on" or "off".  With set, sets the machine on or off as
specified.
.RE
.P
**mode {manual|auto|mdi}**
.RS
With get, ignores any parameters and returns the current machine mode.
With set, sets the machine mode as specified.
.RE
.P
**mist {on|off}**
.RS
With get, ignores any parameters and returns the current mist coolant
setting.  With set, sets the mist setting as specified.
.RE
.P
**flood {on|off}**
.RS
With get, ignores any parameters and returns the current flood coolant
setting.  With set, sets the flood setting as specified.
.RE
.P
**lube {on|off}**
.RS
With get, ignores any parameters and returns the current lube pump
setting.  With set, sets the lube pump setting as specified.
.RE
.P
**lube_level**
.RS
With get, returns the lubricant level sensor reading as "ok" or "low".
With set, mocks you for wishful thinking.
.RE
.P
**spindle {forward|reverse|increase|decrease|constant|off}**
.RS
With get, any parameter is ignored and the current spindle state is
returned as "forward", "reverse", "increase", "decrease", or "off". With
set, sets the spindle as specified.  Note that "increase" and "decrease"
will cause a speed change in the corresponding direction until a
"constant" command is sent.
.RE
.P
**brake {on|off}**
.RS
With get, any parameter is ignored and the current brake setting is
returned.  With set, the brake is set as specified.
.RE
.P
**tool**
.RS
With get, returns the id of the currently loaded tool.
.RE
.P
**tool_offset**
.RS
With get, returns the currently applied tool length offset.
.RE
.P
**load_tool_table <file>**
.RS
With set, loads the tool table specified by <file>.
.RE
.P
**home {0|1|2|...}**
.RS
With set, homes the indicated axis.
.RE
.P
**jog_stop {0|1|2|...}**
.RS
With set, stop any in-progress jog on the specified axis.
.RE
.P
**jog {0|1|2|...} <speed>**
.RS
With set, jog the specified axis at <speed>; sign of speed is direction.
.RE
.P
**jog_incr {0|1|2|...} <speed> <incr>**
.RS
With set, jog the indicated axis by increment <incr> at the <speed>; sign of
speed is direction.
.RE
.P
**feed_override <percent>**
.RS
With get, any parameter is ignored and the current feed override is
returns (as a percentage of commanded feed).  With set, sets the feed
override as specified.
.RE
.P
**spindle_override <percent>**
.RS
With get, any parameter is ignored and the current spindle override
is returnd (as a percentage of commanded speed).  With set, sets the
spindle override as specified.
.RE
.P
**abs_cmd_pos [{0|1|...}]**
.RS
With get, returns the specified axis' commanded position in absolute
coordinates.  If no axis is specified, returns all axes' commanded
absolute position.
.RE
.P
**abs_act_pos [{0|1|...}]**
.RS
With get, returns the specified axis' actual position in absolute
coordinates.  If no axis is specified, returns all axes' actual absolute
position.
.RE
.P
**rel_cmd_pos [{0|1|...}]**
.RS
With get, returns the specified axis' commanded position in relative
coordinates, including tool length offset.  If no axis is specified,
returns all axes' commanded relative position.
.RE
.P
**rel_act_pos [{0|1|...}]**
.RS
With get, returns the specified axis' actual position in relative
coordinates, including tool length offset.  If no axis is specified,
returns all axes' actual relative position.
.RE
.P
**joint_pos [{0|1|...}]**
.RS
With get, returns the specified joint's actual position in absolute
coordinates, excluding tool length offset.  If no joint is specified,
returns all joints' actual absolute position.
.RE
.P
**pos_offset [{X|Y|Z|R|P|W}]**
.RS
With get, returns the position offset associated with the world coordinate
provided.
.RE
.P
**joint_limit [{0|1|...}]**
.RS
With get, returns limit status of the specified joint as "ok", "minsoft",
"minhard", "maxsoft", or "maxhard".  If no joint number is specified,
returns the limit status of all joints.
.RE
.P
**joint_fault [{0|1|...}]**
.RS
With get, returns the fault status of the specified joint as "ok" or
"fault".  If no joint number is specified, returns the fault status of
all joints.
.RE
.P
**joint_homed [{0|1|...}]**
.RS
With get, returns the homed status of the specified joint as "homed"
or "not".  If no joint number is specified, returns the homed status of
all joints.
.RE
.P
**mdi <string>**
.RS
With set, sends <string> as an MDI command.
.RE
.P
**task_plan_init**
.RS
With set, initializes the program interpreter.
.RE
.P
**open <filename>**
.RS
With set, opens the named file.  The <filename> is opened by linuxcnc,
so it should either be an absolute path or a relative path starting in
the linuxcnc working directory (the directory of the active .ini file).
Note that linuxcnc can only have one file open at a time, and it's up to
the UI (linuxcncrsh or similar) to close any open file before opening a
new file.  linuxcncrsh currently does not support closing files, which
rather limits the utility of this command.
.RE
.P
**run [<StartLine>]**
.RS
With set, runs the opened program.  If no StartLine is specified, runs
from the beginning.  If a StartLine is specified, start line, runs from
that line. A start line of -1 runs in verify mode.
.RE
.P
**pause**
.RS
With set, pause program execution.
.RE
.P
**resume**
.RS
With set, resume program execution.
.RE
.P
**abort**
.RS
With set, abort program or MDI execution.
.RE
.P
**step**
.RS
With set, step the program one line.
.RE
.P
**program**
.RS
With get, returns the name of the currently opened program, or "none".
.RE
.P
**program_line**
.RS
With get, returns the currently executing line of the program.
.RE
.P
**program_status**
.RS
With get, returns "idle", "running", or "paused".
.RE
.P
**program_codes**
.RS
With get, returns the string for the currently active program codes.
.RE
.P
**joint_type [<joint>]**
.RS
With get, returns "linear", "angular", or "custom" for the type of the
specified joint (or for all joints if none is specified).
.RE
.P
**joint_units [<joint>]**
.RS
With get, returns "inch", "mm", "cm", or "deg", "rad", "grad", or
"custom", for the corresponding native units of the specified joint (or
for all joints if none is specified).  The type of the axis (linear or
angular) is used to resolve which type of units are returned. The units
are obtained heuristically, based on the EMC_AXIS_STAT::units numerical
value of user units per mm or deg.  For linear joints, something close
to 0.03937 is deemed "inch", 1.000 is "mm", 0.1 is "cm", otherwise it's
"custom".  For angular joints, something close to 1.000 is deemed "deg",
PI/180 is "rad", 100/90 is "grad", otherwise it's "custom".
.RE
.P
**program_units**
.RS
Synonym for program_linear_units.
.RE
.P
**program_linear_units**
.RS
With get, returns "inch", "mm", "cm", or "none", for the corresponding
linear units that are active in the program interpreter.
.RE
.P
**program_angular_units**
.RS
With get, returns "deg", "rad", "grad", or "none" for the corresponding
angular units that are active in the program interpreter.
.RE
.P
**user_linear_units**
.RS
With get, returns "inch", "mm", "cm", or "custom", for the corresponding
native user linear units of the LinuxCNC trajectory level. This is obtained
heuristically, based on the EMC_TRAJ_STAT::linearUnits numerical value
of user units per mm.  Something close to 0.03937 is deemed "inch",
1.000 is "mm", 0.1 is "cm", otherwise it's "custom".
.RE
.P
**user_angular_units**
.RS
Returns "deg", "rad", "grad", or "custom" for the corresponding native
user angular units of the LinuxCNC trajectory level. Like with linear units,
this is obtained heuristically.
.RE
.P
**display_linear_units**
.RS
With get, returns "inch", "mm", "cm", or "custom", for the linear
units that are active in the display.  This is effectively the value
of linearUnitConversion.
.RE
**display_angular_units**
.RS
With get, returns "deg", "rad", "grad", or "custom", for the angular
units that are active in the display.  This is effectively the value
of angularUnitConversion.
.RE
.P
**linear_unit_conversion {inch|mm|cm|auto}**
.RS
With get, any parameter is ignored and the active unit conversion is
returned.  With set, sets the unit to be displayed.  If it's "auto",
the units to be displayed match the program units.
.RE
.P
**angular_unit_conversion {deg|rad|grad|auto}**
.RS
With get, any parameter is ignored and the active unit conversion is
returned.  With set, sets the units to be displayed. If it's "auto",
the units to be displayed match the program units.
.RE
.P
**probe_clear**
.RS
With set, clear the probe tripped flag.
.RE
.P
**probe_tripped**
.RS
With get, return the probe state - has the probe tripped since the last clear?
.RE
.P
**probe_value**
.RS
With get, return the current value of the probe signal.
.RE
.P
**probe**
.RS
With set, move toward a certain location. If the probe is tripped on
the way stop motion, record the position and raise the probe tripped flag.
.RE
.P
**teleop_enable [on|off]**
.RS
With get, any parameter is ignored and the current teleop mode is
returned.  With set, sets the teleop mode as specified.
.RE
.P
**kinematics_type**
.RS
With get, returns the type of kinematics functions used (identity=1,
serial=2, parallel=3, custom=4).
.RE
.P
**override_limits {on|off}**
.RS
With get, any parameter is ignored and the override_limits setting is
returned.  With set, the override_limits parameter is set as specified.
If override_limits is on, disables end of travel hardware limits to
allow jogging off of a limit. If parameters is off, then hardware limits
are enabled.
.RE
.P
**optional_stop {0|1}**
.RS
With get, any parameter is ignored and the current "optional stop on M1"
setting is returned.  With set, the setting is set as specified.
.RE


===== [[example session]]Example Session
.P
This section shows an example session.  Bold items are typed by you,
non-bold is machine output.
.P
The user connects to linuxcncrsh, handshakes with the server (hello), enables
machine commanding from this session (set enable), brings the machine
out of estop (set estop off) and turns it on (set machine on), homes all
the axes, switches the machine to mdi mode, sends an MDI g-code command,
then disconnects and shuts down LinuxCNC.
.P
> **telnet localhost 5007**
Trying 127.0.0.1...
Connected to 127.0.0.1
Escape character is '^]'.
**hello EMC user-typing-at-telnet 1.0**
HELLO ACK EMCNETSVR 1.1
**set enable EMCTOO**
set enable EMCTOO
**set mode manual**
set mode manual
**set estop off**
set estop off
**set machine on**
set machine on
**set home 0**
set home 0
**set home 1**
set home 1
**set home 2**
set home 2
**set mode mdi**
set mode mdi
**set mdi g0x1**
set mdi g0x1
**shutdown**
shutdown
Connection closed by foreign host.
